x <- c(0.8,0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x-1)
?lm
lm(y~x)
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
View(schooldata)
summary(schooldata)
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
G <- gvisGeoChart(schooldata, locationvar = "STABBR", colorvar = "OPEFLAG", options = list(width=600,height = 400))
print(G,"chart")
plot(G,"chart")
plot(G)
G <- gvisGeoChart(schooldata, locationvar = "STABBR", colorvar = "OPEFLAG", options = list(width=600,height = 400, region = "021"))
plot(G)
demo(googleVis)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
+ options=list(showTip=TRUE,
+  showLine=TRUE,
+  enableScrollWheel=TRUE,
+    mapType='terrain',
+   useMapTypeControl=TRUE))
View(schooldata)
plot(AndrewMap)
G <- gvisGeoChart(schooldata, locationvar = "STABBR", colorvar = "OPEFLAG", options = list(width=600,height = 400, region = "US"))
plot(G)
schooldata$latlong=paste(schooldata$LATITUDE, schooldata$LONGITUD, sep=":")
View(schooldata)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(width=600,height = 400, region = "US"))
plot(G)
require(datasets)
View(state.name)
View(state.x77)
school_by_state <- gather(schooldata, STABBR, count)
library(tidyr)
install.packages("tidyr")
library(tidyr)
school_by_state <- gather(schooldata, STABBR, count)
View(school_by_state)
library(dplyr)
school_by_state <- summarize(schooldata, NumOfSchools = n(), state = n_distinct(STABBR))
View(school_by_state)
school_by_state <- schooldata %>%summarize(schooldata, NumOfSchools = n(), state = n_distinct(STABBR))
?summarize
aggstate <- aggregate(schooldata, by=list(STABBR), FUN=count, na.rm=TRUE)
aggstate <- aggregate(schooldata, by=list("STABBR"), FUN=count, na.rm=TRUE)
?aggregate
aggstate <- aggregate(schooldata, by=list("STABBR"), FUN=sum, na.rm=TRUE)
aggstate <- aggregate(schooldata, list(State = STABBR), mean, na.rm=TRUE)
aggstate <- aggregate(schooldata, list(State = schooldata$STABBR), mean, na.rm=TRUE)
head(aggstate)
aggstate <- aggregate(schooldata, list(State = schooldata$STABBR), FUN="length", na.rm=TRUE)
aggstate <- aggregate(schooldata, list(State = schooldata$STABBR), length, na.rm=TRUE)
aggstate <- aggregate(schooldata, list(State = schooldata$STABBR), FUN=length, na.rm=TRUE)
df2 <- count(schooldata, c('STABBR'))
df2
aggregate(x ~ STABBR, data = schooldata, FUN = length)
aggregate(x ~ "STABBR, data = schooldata, FUN = length)
aggregate(x ~ "STABBR", data = schooldata, FUN = length)
hm <- table(schooldata$STABBR)
View(hm)
school_by_state <- as.data.frame(hm)
View(school_by_state)
colnames(school_by_state) <- c("State", "Num_of_schools")
View(school_by_state)
G <- gvisGeoChart(schooldata, locationvar = "School", colorvar = "Num_of_schools", options = list(width=600,height = 400, region = "US"))
Plot(G)
plot(G)
G <- gvisGeoChart(school_by_state, locationvar = "State", colorvar = "Num_of_schools", options = list(width=600,height = 400, region = "US"))
plot(G)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
+ options=list(region="US",
+        displayMode="regions",
+        resolution="provinces",
+      width=600, height=400))
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy", options=list(region="US", displayMode="regions", resolution="provinces",width=600, height=400))
plot(GeoStates)
head(states)
View(states)
require(state)
require(datasets)
View(state)
View(state.abb)
state_and_abb <- cbind(state.abb,states)
View(state_and_abb)
colnames(school_by_state) <- c("state.abb", "Num_of_schools")
school_by_state2 <- merge(school_by_state,state_and_abb,by="state.abb")
View(school_by_state2)
G <- gvisGeoChart(school_by_state2, locationvar = "state.name", colorvar = "Num_of_schools", options = list(width=600,height = 400, region = "US"))
plot(G)
G <- gvisGeoChart(school_by_state2, locationvar = "state.name", colorvar = "Num_of_schools", options=list(region="US", displayMode="regions", resolution="provinces",width=600, height=400))
plot(G)
library(shiny)
schooldata <- read.csv("./data/postscndryunivsrvy2013dirinfo.csv")
suppressPackageStartupMessages(library(googleVis))
school_by_state <- as.data.frame(table(schooldata$STABBR))
colnames(school_by_state) <- c("state.abb", "Num_of_schools")
require(datasets)
state_and_abb <- cbind(state.abb,states)
## drops the 9 territories that don't match the 50 states
school_by_state2 <- merge(school_by_state,state_and_abb,by="state.abb")
View(school_by_state2)
View(school_by_state)
View(state_and_abb)
x = "Alabama"
school_by_state2(3,4==x)
School_by_state2(3,4==x)
School_by_state2[3,4==x]
View(school_by_state2)
school_by_state2[3,4==x]
school_by_state2[state.name = x,Num_of_schools]
x
school_by_state2[state.name == x,Num_of_schools]
school_by_state2[state.name == x,school_by_state2$Num_of_schools]
school_by_state2[state.name == x,2]
x <= "California"
x
x <= "California"
OptionSel <=
"California"
x <- "california"
x <- "California"
school_by_state2[state.name == x,2]
determineNum <- function(x) school_by_state2[state.name == x,2]
determineNum("California")
determineNum("Maryland")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67,0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)$sigma
summary(fit)
summary(fit)$coefficients
require(mtcars)
?datasets
library(datasets)
View(mtcars)
fit <- lm(mpg ~ weight, data=mtcars)
fit <- lm(mpg ~ wt, data=mtcars)
sumCoef <-summary(fit)$coefficients
sumCoef[1,1] + c(-1,1) * qt(.975,df = fit$df) * sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(.975,df = fit$df) * sumCoef[2,2]
?mtcars
fit <- lm(mpg~wt, data=mtcars)
summary(fit)
new_weight <- data.frame(wt = c(3000/1000))
predict(fit, new_weight, interval='prediction')
data(mtcars)
fit <- lm(mpg~wt, data=mtcars)
summary(fit)
mean_weight <- data.frame(wt = c(mean(mtcars$wt)))
predict(fit, mean_weight, interval='confidence')
y <- mtcars$mpg
x <- mtcars$wt / 2
fit <- lm(y~x)
summary(fit)
confint(fit)
fit_with <- lm(mpg~wt+1, data=mtcars)
fit_without <- lm(mpg~1, data=mtcars)
ratio_of_residuals <- sum(resid(fit_with)^2)/sum(resid(fit_without)^2)
ratio_of_residuals
library(swirl)
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild,varRes,varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist,attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor,gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals ^ 2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- galton$child - mu
sTot <- sum((galton$child-mu)^2)
sRes <- diviance()
sRes <- deviance(sTot)
?deviance
sRes <- deviance(galton$child)
sRes <- deviance(galton$child, sTot)
sRes <- deviance(galton$child-sTot)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent,galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(tress2)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
setwd("C:/Users/000094/Desktop/Coursera/Shiny_Test")
shiny::runApp()
library(shiny)
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
suppressPackageStartupMessages(library(googleVis))
school_by_state <- as.data.frame(table(schooldata$STABBR))
colnames(school_by_state) <- c("state.abb", "Num_of_schools")
require(datasets)
state_and_abb <- cbind(state.abb,states)
## drops the 9 territories that don't match the 50 states
school_by_state2 <- merge(school_by_state,state_and_abb,by="state.abb")
getws()
getwd()
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
school_by_state <- as.data.frame(table(schooldata$STABBR))
colnames(school_by_state) <- c("state.abb", "Num_of_schools")
require(datasets)
state_and_abb <- cbind(state.abb,states)
## drops the 9 territories that don't match the 50 states
school_by_state2 <- merge(school_by_state,state_and_abb,by="state.abb")
head(state.abb)
head(states)
require(states)
library(states)
?states
View(school_by_state)
require(datasets)
head(states)
head(state)
?states
head(mtcars)
head(state)
head(state.name)
state_and_abb <- cbind(state.abb,state.name)
View(state_and_abb)
school_by_state2 <- merge(school_by_state,state_and_abb,by="state.abb")
View(school_by_state2)
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
school_sum_by_state <- as.data.frame(table(schooldata$STABBR))
colnames(school_sum_by_state) <- c("state.abb", "Num_of_schools")
require(datasets)
state_and_abb <- cbind(state.abb,state.name)
## drops the 9 territories that don't match the 50 states
school_by_state <- merge(school_sum_by_state,state_and_abb,by="state.abb")
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
school_sum_by_state <- as.data.frame(table(schooldata$STABBR))
colnames(school_sum_by_state) <- c("state.abb", "Num_of_schools")
require(datasets)
state_and_abb <- cbind(state.abb,state.name)
## drops the 9 territories that don't match the 50 states
school_by_state <- merge(school_sum_by_state,state_and_abb,by="state.abb")
write.csv(school_by_state,file="school_by_state", col.names=TRUE)
write.csv(school_by_state,file="school_by_state")
write.csv(school_by_state,file="school_by_state.csv")
schooltest <- read.csv("school_by_state.csv")
View(schooltest)
View(school_by_state)
write.csv(school_by_state,file="school_by_state.csv",row.name=FALSE)
write.csv(school_by_state,file="school_by_state.csv",row.names=FALSE, col.names=TRUE)
write.csv(school_by_state,file="school_by_state.csv",row.names=FALSE)
schooltest <- read.csv("school_by_state.csv")
View(schooltest)
View(school_by_state)
View(school_by_state)
setwd("C:/Users/000094/Desktop/Coursera/DataProd")
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
View(school_by_state)
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
school_by_state <- read.csv("school_by_state.csv")
getwd()
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
school_by_state <- read.csv("school_by_state.csv")
View(school_by_state)
sort(school_by_state$state.name)
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
shiny::runApp()
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
school_sum_by_state <- as.data.frame(table(schooldata$STABBR))
colnames(school_sum_by_state) <- c("state.abb", "Num_of_schools")
require(datasets)
state_and_abb <- cbind(state.abb,state.name)
## drops the 9 territories that don't match the 50 states
school_by_state <- merge(school_sum_by_state,state_and_abb,by="state.abb")
## This file is then saved for use with ui.r
determineNum <- function(state) school_by_state[school_by_state$state.name == x,2]
determineNum("Alabama")
determineNum <- function(x) school_by_state[school_by_state$state.name == x,2]
determineNum("Alabama")
determineNum <- function(state) school_by_state[school_by_state$state.name == state,2]
determineNum("Alabama")
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
shiny::runApp('C:/Users/000094/Desktop/Coursera/Shiny_Test')
shiny::runApp()
shiny::runApp()
shiny::runApp()
suppressPackageStartupMessages(library(googleVis))
G <- gvisGeoChart(school_by_state, locationvar = "state.name", colorvar = "Num_of_schools", options=list(region="US", displayMode="regions", resolution="provinces",width=600, height=400))
print(G)
plot(G)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
G <- gvisGeoChart(school_by_state, locationvar = "state.name", colorvar = "Num_of_schools", options=list(region="US", displayMode="regions", resolution="provinces",width=600, height=400))
plot(G)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
schooldata$latlong=paste(schooldata$LATITUDE, schooldata$LONGITUD, sep=":")
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(width=600,height = 400))
plot (G)
View(schooldata)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(width=600,height = 400, region = "US"))
plot (G)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(width=600,height = 400, region = "US"))
plot (G)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(width=600,height = 400, region = "US-OH"))
plot (G)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(width=600,height = 400, region = "US-AL"))
plot (G)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(region="US", displayMode="regions", resolution="provinces",width=600,height = 400))
plot (G)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(region="US", displayMode="Markers", resolution="provinces",width=600,height = 400))
plot (G)
G <- gvisGeoChart(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(region="US-OH", displayMode="Markers", resolution="provinces",width=600,height = 400))
plot (G)
G <- gvisGeoMap(schooldata, locationvar = "latlong", colorvar = "OPEFLAG", options = list(region="US-OH", displayMode="Markers", resolution="provinces",width=600,height = 400))
G <- gvisGeoMap(schooldata, locationvar = "latlong",  options = list(region="US-OH", displayMode="Markers", resolution="provinces",width=600,height = 400))
plot(g)
plot(G)
G <- gvisGeoMap(schooldata, locationvar = "latlong",  options = list(region="US-OH", dataMode="Markers", resolution="provinces",width=600,height = 400))
plot(G)
G <- gvisGeoMap(schooldata, locationvar = "latlong",  options = list(region="US", dataMode="Markers", resolution="provinces",width=600,height = 400))
plot(G)
G <- gvisGeoMap(schooldata, locationvar = "latlong",  options = list(region="us_metro", dataMode="Markers", resolution="provinces",width=600,height = 400))
plot(G)
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
schooldata$latlong=paste(schooldata$LATITUDE, schooldata$LONGITUD, sep=":")
SchoolMap <- gvisMap(schooldata, "LatLong" , "Tip",
+ options=list(showTip=TRUE,
+  showLine=TRUE,
+  enableScrollWheel=FALSE,
+    mapType='terrain',
+   useMapTypeControl=TRUE))
SchoolMap <- gvisMap(schooldata, "latlong" , "OPEFLAG", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=FALSE, mapType='terrain', useMapTypeControl=TRUE))
suppressPackageStartupMessages(library(googleVis))
SchoolMap <- gvisMap(schooldata, "latlong" , "OPEFLAG", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=FALSE, mapType='terrain', useMapTypeControl=TRUE))
plot(SchoolMap)
View(schooldata)
Ohio_schooldata <- schooldata[,STABBR=="OH"]
Ohio_schooldata <- schooldata[,schooldata$STABBR=="OH"]
Ohio_schooldata <- subset(schooldata,STABBR=="OH")
View(Ohio_schooldata)
SchoolMap <- gvisMap(Ohio_schooldata, "latlong" , "OPEFLAG", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=FALSE, mapType='terrain', useMapTypeControl=TRUE))
plot(Ohio_schooldata)
SchoolMap <- gvisMap(Ohio_schooldata, "latlong" , "OPEFLAG", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=FALSE, mapType='terrain', useMapTypeControl=TRUE, width=600, height=400))
plot(SchoolMap)
View(Ohio_schooldata)
SchoolMap <- gvisMap(Ohio_schooldata, "latlong" , "INSTNM", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=FALSE, mapType='terrain', useMapTypeControl=TRUE, width=600, height=400))
plot(SchoolMap)
SchoolMap <- gvisMap(Ohio_schooldata, "latlong" , "INSTNM", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE, mapType='terrain', useMapTypeControl=TRUE, width=600, height=400))
plot(SchoolMap)
schooldata <- read.csv("postscndryunivsrvy2013dirinfo.csv")
schooldata$latlong=paste(schooldata$LATITUDE, schooldata$LONGITUD, sep=":")
Ohio_schooldata <- subset(schooldata,STABBR=="OH")
SchoolMap <- gvisMap(Ohio_schooldata, "latlong" , "INSTNM", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE, mapType='terrain', useMapTypeControl=TRUE, width=600, height=400,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")))
suppressPackageStartupMessages(library(googleVis))
SchoolMap <- gvisMap(Ohio_schooldata, "latlong" , "INSTNM", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE, mapType='terrain', useMapTypeControl=TRUE, width=600, height=400,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Azure-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/icons-land/vista-map-markers/48/",
"Map-Marker-Ball-Right-Azure-icon.png'",
"}}")))
plot(SchollMap)
plot(SchoolMap)
SchoolMap <- gvisMap(Ohio_schooldata, "latlong" , "INSTNM", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE, mapType='terrain', useMapTypeControl=TRUE, width=600, height=400,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/fatcow/farm-fresh/32/",
"bullet-blue-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/fatcow/farm-fresh/32/",
"bullet-blue-icon.png'",
"}}")))
plot(SchoolMap)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(schooldata)
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
Ohio_schooldata <- subset(schooldata,STABBR=="CA")
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
shiny::runApp()
shiny::runApp()
Ohio_schooldata <- subset(schooldata,STABBR=="OH")
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
g <- gvisMap(Ohio_schooldata2, "latlong" , "INSTNM", options=list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE, mapType='terrain', useMapTypeControl=TRUE, width=400, height=400,
icons=paste0("{",
"'default': {'normal': 'http://icons.iconarchive.com/",
"icons/fatcow/farm-fresh/32/",
"bullet-blue-icon.png',\n",
"'selected': 'http://icons.iconarchive.com/",
"icons/fatcow/farm-fresh/32/",
"bullet-blue-icon.png'",
"}}")))
plot(g)
View(Ohio_schooldata2)
if nrows(Ohio_schooldata) > 400 {
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
else
Ohio_schooldata2 <- Ohio_schooldata[, c("latlong","INSTNM")]
endif
nrows(ohio_schooldata)
nrow(ohio_schooldata)
?nrow
nrow(Ohio_schooldata)
if (nrow(Ohio_schooldata) > 400) {
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
else
Ohio_schooldata2 <- Ohio_schooldata[, c("latlong","INSTNM")]
endif
}
?if
if (nrow(Ohio_schooldata) > 400) {
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
else
Ohio_schooldata2 <- Ohio_schooldata[, c("latlong","INSTNM")]
}
if (nrow(Ohio_schooldata) > 400) {
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
}
else
{
Ohio_schooldata2 <- Ohio_schooldata[, c("latlong","INSTNM")]
}
if (nrow(Ohio_schooldata) > 400) {
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
}  else  {
Ohio_schooldata2 <- Ohio_schooldata[, c("latlong","INSTNM")]
}
Ohio_schooldata <- subset(schooldata,STABBR=="CA")
if (nrow(Ohio_schooldata) > 400) {
Ohio_schooldata2 <- Ohio_schooldata[1:400, c("latlong","INSTNM")]
}  else  {
Ohio_schooldata2 <- Ohio_schooldata[, c("latlong","INSTNM")]
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(school_by_state)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
